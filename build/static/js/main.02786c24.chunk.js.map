{"version":3,"sources":["App.style.js","Snowflake.js","App.js","index.js"],"names":["WindButton","styled","button","_templateObject","_taggedTemplateLiteral","GravityButton","_templateObject2","Snowflake","constructor","x","y","radius","makeAutoObservable","this","autoBind","size","snowflakeStore","snowflakes","wind","gravity","createInitialSnowflakes","setWind","num","setGravity","createSnowflake","Math","random","window","innerWidth","innerHeight","snowflake","find","flake","active","body","Body","create","position","circle","friction","restitution","push","count","interval","shoot","clearInterval","intervalId","setInterval","updateSnowflakes","map","tempflake","App","observer","containerRef","useRef","renderRef","useEffect","engine","Engine","render","Render","element","current","options","width","height","wireframes","stop","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","addBody","event","Composite","add","world","run","Runner","World","Bodies","rectangle","isStatic","fillStyle","strokeStyle","addEventListener","setSize","setTimeout","React","createElement","ref","index","key","style","top","left","backgroundColor","borderRadius","S","onClick","ReactDOM","createRoot","document","getElementById"],"mappings":"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","file":"static/js/main.02786c24.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const WindButton = styled.button`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\theight: 30px;\n`;\n\nexport const GravityButton = styled.button`\n\tposition: absolute;\n\tright: 0;\n\ttop: 60px;\n\theight: 30px;\n`;\n","// store\nimport { Body } from 'matter-js';\nimport { makeAutoObservable, observable } from 'mobx';\n\nclass Snowflake {\n\tx;\n\ty;\n\tsize;\n\n\tconstructor(x, y, radius) {\n\t\tmakeAutoObservable(this, {}, { autoBind: true });\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.size = radius;\n\t\t// Other properties...\n\t}\n}\n\n// SnowflakeStore.js\n\nclass SnowflakeStore {\n\tsnowflakes = [];\n\twind = 0;\n\tgravity = 1;\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t\tthis.createInitialSnowflakes();\n\t}\n\n\tsetWind(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.wind + 3) % 5) - 2;\n\t\t}\n\t\tthis.wind = num;\n\t}\n\n\tsetGravity(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.gravity + 1) % 5) + 1;\n\t\t}\n\t\tthis.gravity = num;\n\t}\n\n\tcreateSnowflake() {\n\t\tconst x = Math.random() * window.innerWidth;\n\t\tconst y = -(Math.random() * window.innerHeight) / 8;\n\t\tconst radius = Math.random() * 10 + 5;\n\n\t\tconst snowflake = this.snowflakes.find((flake) => !flake.active);\n\n\t\tif (snowflake) {\n\t\t\tsnowflake.x = x;\n\t\t\tsnowflake.y = y;\n\t\t\tsnowflake.size = radius;\n\t\t\tsnowflake.active = true;\n\t\t} else {\n\t\t\tconst body = Body.create({\n\t\t\t\tposition: { x, y },\n\t\t\t\tcircle: { radius },\n\t\t\t\tfriction: 0.001,\n\t\t\t\trestitution: 0.5,\n\t\t\t});\n\t\t\tthis.snowflakes.push(new Snowflake(x, y, radius, body));\n\t\t}\n\t}\n\n\tcreateInitialSnowflakes() {\n\t\t// 초기에 200개의 snowflake를 생성\n\t\tlet count = 200;\n\t\tlet interval = 100;\n\n\t\tconst shoot = () => {\n\t\t\tif (count <= 0) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tinterval = 50 + Math.random() * 50;\n\t\t\tthis.createSnowflake();\n\t\t};\n\t\tconst intervalId = setInterval(() => {\n\t\t\tshoot();\n\t\t}, interval);\n\t}\n\n\tupdateSnowflakes() {\n\t\tthis.snowflakes = this.snowflakes.map((snowflake) => {\n\t\t\tconst tempflake = { ...snowflake };\n\t\t\tif (tempflake.active) {\n\t\t\t\ttempflake.y += this.gravity;\n\t\t\t\ttempflake.x += Math.random() * 1 - 0.5 + this.wind;\n\t\t\t\t// 눈송이가 아래로 움직이도록\n\t\t\t\t// 추가적인 물리 업데이트 또는 로직을 여기에 추가할 수 있습니다.\n\t\t\t\t// 예: 중력 적용, 충돌 감지, 다양한 효과 등\n\t\t\t}\n\n\t\t\t// 눈송이가 화면 아래로 벗어나면 비활성화\n\t\t\tif (\n\t\t\t\ttempflake.y > window.innerHeight ||\n\t\t\t\ttempflake.x < 0 ||\n\t\t\t\ttempflake.x > window.innerWidth\n\t\t\t) {\n\t\t\t\ttempflake.active = false;\n\t\t\t\tthis.createSnowflake();\n\t\t\t}\n\t\t\treturn tempflake;\n\t\t});\n\t}\n}\n\nconst snowflakeStore = new SnowflakeStore();\nexport default snowflakeStore;\n","// App.js\nimport React, { useEffect, useRef } from 'react';\nimport {\n\tEngine,\n\tRender,\n\tRunner,\n\tComposite,\n\tMouse,\n\tBodies,\n\tMouseConstraint,\n\tWorld,\n\tBody,\n\tMatter,\n\tCommon,\n\tVector,\n\tCollision,\n} from 'matter-js';\nimport * as S from './App.style';\nimport snowflakeStore from './Snowflake';\nimport { observer } from 'mobx-react';\n\nconst App = observer(() => {\n\tconst containerRef = useRef(null);\n\tconst renderRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst engine = Engine.create();\n\t\tconst render = Render.create({\n\t\t\telement: containerRef.current,\n\t\t\tengine: engine,\n\t\t\toptions: {\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t\twireframes: false,\n\t\t\t},\n\t\t});\n\n\t\tif (renderRef.current) {\n\t\t\tRender.stop(renderRef.current);\n\t\t\tRender.stop(containerRef.current);\n\t\t}\n\n\t\tconst mouse = Mouse.create(render.canvas);\n\n\t\tconst mouseConstraint = MouseConstraint.create(engine, {\n\t\t\tmouse: mouse,\n\t\t\taddBody: (event) => {\n\t\t\t\tconst { x, y } = event.mouse.position;\n\t\t\t\tsnowflakeStore.createSnowflake(x, y);\n\t\t\t},\n\t\t});\n\n\t\tComposite.add(engine.world, [mouseConstraint]);\n\n\t\tRender.run(render);\n\t\tRunner.run(Runner.create(), engine);\n\n\t\tWorld.add(engine.world, [\n\t\t\tBodies.rectangle(\n\t\t\t\twindow.innerWidth / 2,\n\t\t\t\twindow.innerHeight + 50,\n\t\t\t\twindow.innerWidth,\n\t\t\t\t100,\n\t\t\t\t{\n\t\t\t\t\tisStatic: true,\n\t\t\t\t\trender: { fillStyle: 'transparent', strokeStyle: 'transparent' },\n\t\t\t\t}\n\t\t\t),\n\t\t]);\n\n\t\twindow.addEventListener('resize', () => {\n\t\t\tRender.setSize(render, window.innerWidth, window.innerHeight);\n\t\t});\n\n\t\t// // 눈송이 간의 상호작용 및 눈송이 끼리의 충돌을 처리하는 함수\n\t\t// const handleSnowflakeInteractions = () => {\n\t\t// \tsnowflakeStore.snowflakes.forEach((snowflakeA) => {\n\t\t// \t\tsnowflakeStore.snowflakes.forEach((snowflakeB) => {\n\t\t// \t\t\tif (snowflakeA !== snowflakeB) {\n\t\t// \t\t\t\t// 눈송이 간의 충돌을 검사하고 힘을 가함\n\t\t// \t\t\t\thandleSnowflakeCollision(snowflakeA, snowflakeB);\n\t\t// \t\t\t}\n\t\t// \t\t});\n\n\t\t// \t\t// 마우스와 눈송이 간의 힘을 처리\n\t\t// \t\thandleMouseInteraction(snowflakeA);\n\t\t// \t});\n\t\t// };\n\n\t\t// // 눈송이 간의 충돌을 처리하는 함수\n\t\t// const handleSnowflakeCollision = (snowflakeA, snowflakeB) => {\n\t\t// \tconst collision = Collision.collides(snowflakeA.body, snowflakeB.body);\n\n\t\t// \tif (collision.collided) {\n\t\t// \t\t// 충돌이 일어났을 때 힘을 가함\n\t\t// \t\tconst collisionNormal = Vector.normalise(collision.collision.normal);\n\t\t// \t\tconst forceMagnitude = 0.002;\n\n\t\t// \t\tBody.applyForce(\n\t\t// \t\t\tsnowflakeA.body,\n\t\t// \t\t\tsnowflakeA.position,\n\t\t// \t\t\tCommon.mult(collisionNormal, forceMagnitude)\n\t\t// \t\t);\n\t\t// \t\tBody.applyForce(\n\t\t// \t\t\tsnowflakeB.body,\n\t\t// \t\t\tsnowflakeB.position,\n\t\t// \t\t\tCommon.mult(collisionNormal, -forceMagnitude)\n\t\t// \t\t);\n\t\t// \t}\n\t\t// };\n\n\t\t// // 마우스와 눈송이 간의 힘을 처리하는 함수\n\t\t// const handleMouseInteraction = (snowflake) => {\n\t\t// \tconst deltaX = mouse.position.x - snowflake.x;\n\t\t// \tconst deltaY = mouse.position.y - snowflake.y;\n\t\t// \tconst distance = Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n\n\t\t// \tif (distance < 100) {\n\t\t// \t\t// 마우스와의 거리가 일정 값 이내일 때 힘을 가함\n\t\t// \t\tconst forceMagnitude = 0.002 * (100 - distance);\n\t\t// \t\tconst force = {\n\t\t// \t\t\tx: deltaX * forceMagnitude,\n\t\t// \t\t\ty: deltaY * forceMagnitude,\n\t\t// \t\t};\n\n\t\t// \t\tBody.applyForce(snowflake, { x: snowflake.x, y: snowflake.y }, force);\n\t\t// \t}\n\t\t// };\n\n\t\tconst updateSnowflakes = () => {\n\t\t\tsnowflakeStore.updateSnowflakes();\n\t\t\t// handleSnowflakeInteractions();\n\t\t\tsetTimeout(updateSnowflakes, 1000 / 60);\n\t\t};\n\n\t\tupdateSnowflakes();\n\n\t\trenderRef.current = render;\n\n\t\treturn () => {\n\t\t\tRender.stop(render);\n\t\t\tRunner.stop(engine);\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<div ref={containerRef}>\n\t\t\t{snowflakeStore.snowflakes.map((snowflake, index) => (\n\t\t\t\t<div\n\t\t\t\t\tkey={index}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: snowflake.y,\n\t\t\t\t\t\tleft: snowflake.x,\n\t\t\t\t\t\twidth: snowflake.size + 'px',\n\t\t\t\t\t\theight: snowflake.size + 'px',\n\t\t\t\t\t\tbackgroundColor: '#fff',\n\t\t\t\t\t\tborderRadius: '50%',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<S.WindButton onClick={() => snowflakeStore.setWind()}>\n\t\t\t\t바람 세기\n\t\t\t</S.WindButton>\n\t\t\t<S.GravityButton onClick={() => snowflakeStore.setGravity()}>\n\t\t\t\t중력 세기\n\t\t\t</S.GravityButton>\n\t\t</div>\n\t);\n});\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}
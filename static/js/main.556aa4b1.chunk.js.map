{"version":3,"sources":["App.style.js","Snowflake.js","App.js","index.js"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","WindButton","button","_templateObject2","GravityButton","_templateObject3","Flake","_templateObject4","Snowflake","constructor","x","y","radius","body","collisionFilter","category","mask","this","size","active","accel","updatePosition","position","SnowflakePhysics","gravity","arguments","length","undefined","engine","Engine","create","render","Render","element","document","world","console","log","run","addSnowflake","snowflake","Composite","add","update","setGravity","num","updateSnowflakePosition","newPosition","GRAVITY_ADJUST","MOVE_ADJUST","snowflakeStore","snowflakes","max_count","initial_count","wind","physics","createInitialSnowflakes","Events","on","event","pairs","forEach","pair","bodyA","label","bodyB","snowflakeA","getSnowflakeByBody","snowflakeB","forceX","Math","random","forceY","Body","applyForce","removeCollisionListener","off","find","setWind","createSnowflake","window","innerWidth","innerHeight","flake","circle","friction","restitution","push","count","interval","shoot","clearInterval","intervalId","setInterval","updateSnowflakes","map","index","tempflake","App","setRender","useState","useEffect","addEventListener","prev","setTimeout","React","createElement","S","key","style","top","left","width","height","onClick","ReactDOM","createRoot","getElementById"],"mappings":"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","file":"static/js/main.556aa4b1.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground-color: black;\n`;\n\nexport const WindButton = styled.button`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\theight: 30px;\n`;\n\nexport const GravityButton = styled.button`\n\tposition: absolute;\n\tright: 0;\n\ttop: 60px;\n\theight: 30px;\n`;\n\nexport const Flake = styled.div`\n\tposition: absolute;\n\tbackground-color: #fff;\n\tborder-radius: 50%;\n`;\n","import { Engine, Render, Composite, Body, Events, Detector } from 'matter-js';\n\nclass Snowflake {\n\tconstructor(x, y, radius, body) {\n\t\tbody.collisionFilter = {\n\t\t\tcategory: 0x0001,\n\t\t\tmask: 0x0001,\n\t\t};\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.size = radius;\n\t\tthis.active = false;\n\t\tthis.accel = { x: 0, y: 0 };\n\t\tthis.body = body;\n\t}\n\n\tupdatePosition() {\n\t\tthis.x = this.body.position.x;\n\t\tthis.y = this.body.position.y;\n\t}\n}\n\nclass SnowflakePhysics {\n\tconstructor(gravity = { x: 0, y: 1 }) {\n\t\t// Matter.Engine 생성\n\t\tthis.engine = Engine.create();\n\t\tthis.engine.gravity = gravity;\n\n\t\t// Matter.Render 생성 (optional)\n\t\tthis.render = Render.create({\n\t\t\telement: document.body,\n\t\t\tengine: this.engine,\n\t\t});\n\n\t\tconst collisionFilter = {\n\t\t\tcategory: 0x0001,\n\t\t\tmask: 0x0001,\n\t\t};\n\n\t\t// 눈덩이 그룹을 나타내는 Matter.World 생성\n\t\tthis.world = this.engine.world;\n\n\t\tconsole.log('World', this.world);\n\n\t\tRender.run(this.render);\n\t}\n\n\t// 눈덩이를 Matter.World에 추가하는 함수\n\taddSnowflake(snowflake) {\n\t\tconsole.log('add!', snowflake.body.position);\n\t\tComposite.add(this.world, snowflake.body);\n\t}\n\n\t// 업데이트 함수\n\tupdate() {\n\t\tEngine.update(this.engine);\n\t}\n\n\tsetGravity(num) {\n\t\tthis.gravity = num;\n\t}\n\n\tupdateSnowflakePosition(snowflake) {\n\t\tconst newPosition = snowflake.body.position;\n\t\tsnowflake.x = newPosition.x;\n\t\tsnowflake.y = newPosition.y;\n\t}\n}\n\nconst GRAVITY_ADJUST = 0.001;\nconst MOVE_ADJUST = 0.01;\n\nclass SnowflakeStore {\n\tconstructor() {\n\t\tthis.snowflakes = [];\n\t\tthis.max_count = 500;\n\t\tthis.initial_count = 200;\n\t\tthis.wind = 0;\n\t\tthis.gravity = 0.1;\n\t\tthis.physics = new SnowflakePhysics({ x: 0, y: this.gravity });\n\n\t\tthis.createInitialSnowflakes();\n\n\t\t// 충돌 이벤트 핸들러 등록\n\t\tEvents.on(this.physics.engine, 'collisionStart', (event) => {\n\t\t\tevent.pairs.forEach((pair) => {\n\t\t\t\tif (\n\t\t\t\t\tpair.bodyA.label === 'snowflake' &&\n\t\t\t\t\tpair.bodyB.label === 'snowflake'\n\t\t\t\t) {\n\t\t\t\t\tconst snowflakeA = this.getSnowflakeByBody(pair.bodyA);\n\t\t\t\t\tconst snowflakeB = this.getSnowflakeByBody(pair.bodyB);\n\n\t\t\t\t\tif (snowflakeA.active && snowflakeB.active) {\n\t\t\t\t\t\t// 반대 방향의 힘을 주어 충돌 효과를 만듦\n\t\t\t\t\t\tconst forceX = -(Math.random() * 1 - 0.5) * MOVE_ADJUST;\n\t\t\t\t\t\tconst forceY = -this.gravity * GRAVITY_ADJUST;\n\n\t\t\t\t\t\t// 각 눈송이에 반대 방향으로 힘을 적용\n\t\t\t\t\t\tBody.applyForce(snowflakeA.body, snowflakeA.body.position, {\n\t\t\t\t\t\t\tx: forceX,\n\t\t\t\t\t\t\ty: forceY,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tBody.applyForce(snowflakeB.body, snowflakeB.body.position, {\n\t\t\t\t\t\t\tx: -forceX,\n\t\t\t\t\t\t\ty: -forceY,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t// Matter.Events.off를 사용하여 리스너 제거 (선택 사항)\n\tremoveCollisionListener() {\n\t\tEvents.off(this.physics.engine, 'collisionStart');\n\t}\n\n\t// Matter.js의 Body를 통해 눈송이 객체 얻기\n\tgetSnowflakeByBody(body) {\n\t\treturn this.snowflakes.find((snowflake) => snowflake.body === body);\n\t}\n\n\tsetWind(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.wind + 3) % 5) - 2;\n\t\t}\n\t\tthis.wind = num;\n\t}\n\n\tsetGravity(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.gravity + 1) % 5) + 1;\n\t\t}\n\t\tthis.gravity = num;\n\t}\n\n\tcreateSnowflake() {\n\t\tconst x = Math.random() * window.innerWidth * 2 - window.innerWidth * 0.5;\n\t\tconst y = -(Math.random() * window.innerHeight) / 8;\n\t\tconst radius = Math.random() * 10 + 5;\n\n\t\tconst snowflake = this.snowflakes.find((flake) => !flake.active);\n\n\t\tif (snowflake) {\n\t\t\tsnowflake.x = x;\n\t\t\tsnowflake.y = y;\n\t\t\tsnowflake.size = radius;\n\t\t\tsnowflake.active = true;\n\t\t\tsnowflake.accel = { x: 0, y: 0 };\n\t\t} else {\n\t\t\tconst body = Body.create({\n\t\t\t\tposition: { x, y },\n\t\t\t\tcircle: { radius },\n\t\t\t\tfriction: 0.001,\n\t\t\t\trestitution: 0.5,\n\t\t\t});\n\t\t\tconst snowflake = new Snowflake(x, y, radius, body);\n\t\t\tthis.physics.addSnowflake(snowflake);\n\t\t\tthis.snowflakes.push(snowflake);\n\t\t}\n\t}\n\n\tcreateInitialSnowflakes() {\n\t\t// 초기에 200개의 snowflake를 생성\n\t\tlet count = this.max_count;\n\t\tlet interval = 100;\n\n\t\tconst shoot = () => {\n\t\t\tif (count <= 0) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tinterval = 25 + Math.random() * 50;\n\t\t\tthis.createSnowflake();\n\t\t};\n\t\tconst intervalId = setInterval(() => {\n\t\t\tshoot();\n\t\t}, interval);\n\t}\n\n\t// SnowflakeStore 클래스 내에서\n\tupdateSnowflakes() {\n\t\tthis.snowflakes = this.snowflakes.map((snowflake, index) => {\n\t\t\tif (!snowflake.active) return snowflake;\n\t\t\tconst tempflake = { ...snowflake };\n\t\t\ttempflake.updatePosition = snowflake.updatePosition;\n\t\t\tif (tempflake.active === true) {\n\t\t\t\tconst forceX = (Math.random() * 1 - 0.5) * MOVE_ADJUST;\n\t\t\t\tconst forceY = this.gravity * GRAVITY_ADJUST;\n\n\t\t\t\t// Matter.js를 사용하여 힘을 적용\n\t\t\t\tBody.applyForce(tempflake.body, tempflake.body.position, {\n\t\t\t\t\tx: forceX,\n\t\t\t\t\ty: forceY,\n\t\t\t\t});\n\n\t\t\t\t// Matter.js의 Body 위치를 화면에 표시되는 위치로 업데이트\n\t\t\t\tthis.physics.updateSnowflakePosition(tempflake);\n\n\t\t\t\t// flakes 객체의 위치 업데이트\n\t\t\t\ttempflake.updatePosition();\n\n\t\t\t\t// 눈송이가 화면 밖으로 벗어나면 비활성화\n\t\t\t\tif (tempflake.y > window.innerHeight * 0.9) {\n\t\t\t\t\ttempflake.active = 'stay';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tempflake;\n\t\t});\n\n\t\tthis.physics.update();\n\t}\n}\n\nconst snowflakeStore = new SnowflakeStore();\nexport default snowflakeStore;\n","// App.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport * as S from './App.style';\nimport snowflakeStore from './Snowflake';\n\nconst App = () => {\n\tconst [, setRender] = useState(true);\n\n\tuseEffect(() => {\n\t\twindow.addEventListener('resize', () => {});\n\n\t\tconst updateSnowflakes = () => {\n\t\t\tsnowflakeStore.updateSnowflakes();\n\t\t\t// handleSnowflakeInteractions();\n\t\t\tsetRender((prev) => !prev);\n\t\t\tsetTimeout(updateSnowflakes, 1000 / 60);\n\t\t};\n\n\t\tupdateSnowflakes();\n\t}, []);\n\n\treturn (\n\t\t<S.Container>\n\t\t\t{snowflakeStore.snowflakes.map((snowflake, index) => (\n\t\t\t\t<S.Flake\n\t\t\t\t\tkey={index}\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\ttop: snowflake.y,\n\t\t\t\t\t\tleft: snowflake.x,\n\t\t\t\t\t\twidth: snowflake.size + 'px',\n\t\t\t\t\t\theight: snowflake.size + 'px',\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<S.WindButton onClick={() => snowflakeStore.setWind()}>\n\t\t\t\t바람 세기\n\t\t\t</S.WindButton>\n\t\t\t<S.GravityButton onClick={() => snowflakeStore.setGravity()}>\n\t\t\t\t중력 세기\n\t\t\t</S.GravityButton>\n\t\t</S.Container>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}
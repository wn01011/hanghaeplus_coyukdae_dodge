{"version":3,"sources":["App.style.js","Snowflake.js","Gyro.jsx","App.js","index.js"],"names":["Container","styled","div","_templateObject","_taggedTemplateLiteral","WindButton","button","_templateObject2","GravityButton","_templateObject3","_templateObject4","Snowflake","constructor","x","y","radius","body","collisionFilter","category","mask","label","this","size","active","accel","updatePosition","position","SnowflakePhysics","gravity","arguments","length","undefined","engine","Engine","create","render","Render","element","document","world","console","log","run","addSnowflake","snowflake","Composite","add","update","setGravity","num","updateSnowflakePosition","newPosition","GRAVITY_ADJUST","MOVE_ADJUST","snowflakeStore","snowflakes","max_count","initial_count","wind","physics","createInitialSnowflakes","Events","on","event","pairs","forEach","pair","bodyA","bodyB","snowflakeA","getSnowflakeByBody","snowflakeB","forceX","Math","random","forceY","Body","applyForce","removeCollisionListener","off","find","setWind","createSnowflake","window","innerWidth","innerHeight","flake","circle","friction","restitution","push","count","interval","shoot","clearInterval","intervalId","setInterval","updateSnowflakes","map","index","tempflake","GyroContainer","Gyro","gyroscopeRef","useRef","useEffect","Composites","Runner","Common","Mouse","MouseConstraint","Bodies","Matter","current","options","width","height","showAngleIndicator","wireframes","runner","stack","sides","round","chamfer","rectangle","fillStyle","polygon","windowWidth","windowHeight","rectanglePool","i","isSleeping","activateRectangle","inactiveRectangle","rect","isActive","randomX","randomY","setPosition","resetFallingRectangle","setTimeout","setVelocity","isStatic","mouse","canvas","mouseConstraint","constraint","stiffness","visible","lookAt","min","max","updateGravity","orientation","clamp","gamma","beta","addEventListener","stop","removeEventListener","React","createElement","Fragment","ref","App","S","onClick","ReactDOM","createRoot","getElementById"],"mappings":"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","file":"static/js/main.95fcaea5.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.div`\n\twidth: 100vw;\n\theight: 100vh;\n\tbackground-color: black;\n`;\n\nexport const WindButton = styled.button`\n\tposition: absolute;\n\ttop: 0;\n\tright: 0;\n\theight: 30px;\n\tz-index: 10;\n`;\n\nexport const GravityButton = styled.button`\n\tposition: absolute;\n\tright: 0;\n\ttop: 60px;\n\theight: 30px;\n\tz-index: 10;\n`;\n\nexport const Flake = styled.div`\n\tposition: absolute;\n\tbackground-color: #fff;\n\tborder-radius: 50%;\n`;\n","import { Engine, Render, Composite, Body, Events, Detector } from 'matter-js';\n\nclass Snowflake {\n\tconstructor(x, y, radius, body) {\n\t\tbody.collisionFilter = {\n\t\t\tcategory: 0x0001,\n\t\t\tmask: 0x0001,\n\t\t};\n\t\tbody.label = 'snowflake';\n\t\tthis.x = x;\n\t\tthis.y = y;\n\t\tthis.size = radius;\n\t\tthis.active = false;\n\t\tthis.accel = { x: 0, y: 0 };\n\t\tthis.body = body;\n\t}\n\n\tupdatePosition() {\n\t\tthis.x = this.body.position.x;\n\t\tthis.y = this.body.position.y;\n\t}\n}\n\nclass SnowflakePhysics {\n\tconstructor(gravity = { x: 0, y: 1 }) {\n\t\t// Matter.Engine 생성\n\t\tthis.engine = Engine.create();\n\t\tthis.engine.gravity = gravity;\n\n\t\t// Matter.Render 생성 (optional)\n\t\tthis.render = Render.create({\n\t\t\telement: document.body,\n\t\t\tengine: this.engine,\n\t\t});\n\n\t\t// 눈덩이 그룹을 나타내는 Matter.World 생성\n\t\tthis.world = this.engine.world;\n\n\t\tconsole.log('World', this.world);\n\n\t\tRender.run(this.render);\n\t}\n\n\t// 눈덩이를 Matter.World에 추가하는 함수\n\taddSnowflake(snowflake) {\n\t\tComposite.add(this.world, snowflake.body);\n\t}\n\n\t// 업데이트 함수\n\tupdate() {\n\t\tEngine.update(this.engine);\n\t}\n\n\tsetGravity(num) {\n\t\tthis.gravity = num;\n\t}\n\n\tupdateSnowflakePosition(snowflake) {\n\t\tconst newPosition = snowflake.body.position;\n\t\tsnowflake.x = newPosition.x;\n\t\tsnowflake.y = newPosition.y;\n\t}\n}\n\nconst GRAVITY_ADJUST = 0.001;\nconst MOVE_ADJUST = 0.01;\n\nclass SnowflakeStore {\n\tconstructor() {\n\t\tthis.snowflakes = [];\n\t\tthis.max_count = 500;\n\t\tthis.initial_count = 200;\n\t\tthis.wind = 0;\n\t\tthis.gravity = 0.1;\n\t\tthis.physics = new SnowflakePhysics({ x: 0, y: this.gravity });\n\n\t\tthis.createInitialSnowflakes();\n\n\t\t// 충돌 이벤트 핸들러 등록\n\t\tEvents.on(this.physics.engine, 'collisionStart', (event) => {\n\t\t\tconsole.log('event', event);\n\t\t\tevent.pairs.forEach((pair) => {\n\t\t\t\tif (\n\t\t\t\t\tpair.bodyA.label === 'snowflake' &&\n\t\t\t\t\tpair.bodyB.label === 'snowflake'\n\t\t\t\t) {\n\t\t\t\t\tconst snowflakeA = this.getSnowflakeByBody(pair.bodyA);\n\t\t\t\t\tconst snowflakeB = this.getSnowflakeByBody(pair.bodyB);\n\n\t\t\t\t\tif (snowflakeA.active && snowflakeB.active) {\n\t\t\t\t\t\t// 반대 방향의 힘을 주어 충돌 효과를 만듦\n\t\t\t\t\t\tconst forceX = -(Math.random() * 1 - 0.5) * MOVE_ADJUST;\n\t\t\t\t\t\tconst forceY = -this.gravity * GRAVITY_ADJUST;\n\n\t\t\t\t\t\t// 각 눈송이에 반대 방향으로 힘을 적용\n\t\t\t\t\t\tBody.applyForce(snowflakeA.body, snowflakeA.body.position, {\n\t\t\t\t\t\t\tx: forceX,\n\t\t\t\t\t\t\ty: forceY,\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tBody.applyForce(snowflakeB.body, snowflakeB.body.position, {\n\t\t\t\t\t\t\tx: -forceX,\n\t\t\t\t\t\t\ty: -forceY,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\t// Matter.Events.off를 사용하여 리스너 제거 (선택 사항)\n\tremoveCollisionListener() {\n\t\tEvents.off(this.physics.engine, 'collisionStart');\n\t}\n\n\t// Matter.js의 Body를 통해 눈송이 객체 얻기\n\tgetSnowflakeByBody(body) {\n\t\treturn this.snowflakes.find((snowflake) => snowflake.body === body);\n\t}\n\n\tsetWind(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.wind + 3) % 5) - 2;\n\t\t}\n\t\tthis.wind = num;\n\t}\n\n\tsetGravity(num) {\n\t\tif (!num) {\n\t\t\tnum = ((this.gravity + 1) % 5) + 1;\n\t\t}\n\t\tthis.gravity = num;\n\t}\n\n\tcreateSnowflake() {\n\t\tconst x = Math.random() * window.innerWidth * 2 - window.innerWidth * 0.5;\n\t\tconst y = -(Math.random() * window.innerHeight) / 8;\n\t\tconst radius = Math.random() * 10 + 5;\n\n\t\tconst snowflake = this.snowflakes.find((flake) => !flake.active);\n\n\t\tif (snowflake) {\n\t\t\tsnowflake.x = x;\n\t\t\tsnowflake.y = y;\n\t\t\tsnowflake.size = radius;\n\t\t\tsnowflake.active = true;\n\t\t\tsnowflake.accel = { x: 0, y: 0 };\n\t\t} else {\n\t\t\tconst body = Body.create({\n\t\t\t\tposition: { x, y },\n\t\t\t\tcircle: { radius },\n\t\t\t\tfriction: 0.001,\n\t\t\t\trestitution: 0.5,\n\t\t\t\tcollisionFilter: {\n\t\t\t\t\tcategory: 0x0001,\n\t\t\t\t\tmask: 0x0001,\n\t\t\t\t},\n\t\t\t});\n\t\t\tconst snowflake = new Snowflake(x, y, radius, body);\n\t\t\tthis.physics.addSnowflake(snowflake);\n\t\t\tthis.snowflakes.push(snowflake);\n\t\t}\n\t}\n\n\tcreateInitialSnowflakes() {\n\t\t// 초기에 200개의 snowflake를 생성\n\t\tlet count = this.max_count;\n\t\tlet interval = 100;\n\n\t\tconst shoot = () => {\n\t\t\tif (count <= 0) {\n\t\t\t\tclearInterval(intervalId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcount--;\n\t\t\tinterval = 25 + Math.random() * 50;\n\t\t\tthis.createSnowflake();\n\t\t};\n\t\tconst intervalId = setInterval(() => {\n\t\t\tshoot();\n\t\t}, interval);\n\t}\n\n\t// SnowflakeStore 클래스 내에서\n\tupdateSnowflakes() {\n\t\tthis.snowflakes = this.snowflakes.map((snowflake, index) => {\n\t\t\tif (!snowflake.active) return snowflake;\n\t\t\tconst tempflake = { ...snowflake };\n\t\t\ttempflake.updatePosition = snowflake.updatePosition;\n\t\t\tif (tempflake.active === true) {\n\t\t\t\tconst forceX = (Math.random() * 1 - 0.5) * MOVE_ADJUST;\n\t\t\t\tconst forceY = this.gravity * GRAVITY_ADJUST;\n\n\t\t\t\t// Matter.js를 사용하여 힘을 적용\n\t\t\t\tBody.applyForce(tempflake.body, tempflake.body.position, {\n\t\t\t\t\tx: forceX,\n\t\t\t\t\ty: forceY,\n\t\t\t\t});\n\n\t\t\t\t// Matter.js의 Body 위치를 화면에 표시되는 위치로 업데이트\n\t\t\t\tthis.physics.updateSnowflakePosition(tempflake);\n\n\t\t\t\t// flakes 객체의 위치 업데이트\n\t\t\t\ttempflake.updatePosition();\n\n\t\t\t\t// 눈송이가 화면 밖으로 벗어나면 비활성화\n\t\t\t\tif (tempflake.y > window.innerHeight * 0.9) {\n\t\t\t\t\ttempflake.active = 'stay';\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn tempflake;\n\t\t});\n\n\t\tthis.physics.update();\n\t}\n}\n\nconst snowflakeStore = new SnowflakeStore();\nexport default snowflakeStore;\n","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport Matter from 'matter-js';\n\nconst GyroContainer = styled.div`\n\twidth: 100vw;\n\theight: 100vh;\n\tz-index: 9;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n`;\n\nconst Gyro = () => {\n\tconst gyroscopeRef = useRef(null);\n\n\tuseEffect(() => {\n\t\tconst {\n\t\t\tComposites,\n\t\t\tEngine,\n\t\t\tRender,\n\t\t\tRunner,\n\t\t\tCommon,\n\t\t\tMouse,\n\t\t\tMouseConstraint,\n\t\t\tComposite,\n\t\t\tBodies,\n\t\t\tBody,\n\t\t} = Matter;\n\n\t\t// create engine\n\t\tconst engine = Engine.create();\n\t\tconst world = engine.world;\n\n\t\t// create renderer\n\t\tconst render = Render.create({\n\t\t\telement: gyroscopeRef.current,\n\t\t\tengine: engine,\n\t\t\toptions: {\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t\tshowAngleIndicator: false,\n\t\t\t\twireframes: false,\n\t\t\t},\n\t\t});\n\n\t\tRender.run(render);\n\n\t\t// create runner\n\t\tconst runner = Runner.create();\n\t\tRunner.run(runner, engine);\n\n\t\t// add bodies\n\t\tconst stack = Composite.create();\n\t\tComposite.add(\n\t\t\tstack,\n\t\t\tComposites.stack(20, 20, 100, 3, 0, 0, (x, y) => {\n\t\t\t\tconst sides = Math.round(Common.random(1, 8));\n\t\t\t\tlet chamfer = null;\n\t\t\t\tif (sides > 2 && Common.random() > 0.7) {\n\t\t\t\t\tchamfer = { radius: 10 };\n\t\t\t\t}\n\n\t\t\t\tswitch (Math.round(Common.random(0, 1))) {\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\treturn Bodies.rectangle(\n\t\t\t\t\t\t\tx,\n\t\t\t\t\t\t\ty,\n\t\t\t\t\t\t\tCommon.random(10, 20),\n\t\t\t\t\t\t\tCommon.random(10, 20),\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tchamfer,\n\t\t\t\t\t\t\t\trender: {\n\t\t\t\t\t\t\t\t\tfillStyle: '#fff',\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn Bodies.polygon(x, y, sides, Common.random(10, 30), {\n\t\t\t\t\t\t\tchamfer,\n\t\t\t\t\t\t\trender: {\n\t\t\t\t\t\t\t\tfillStyle: '#fff',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tconst windowWidth = window.innerWidth;\n\t\tconst windowHeight = window.innerHeight;\n\n\t\t// Create a pool of rectangles\n\t\tconst rectanglePool = [];\n\t\tconst poolSize = 200;\n\n\t\tfor (let i = 0; i < poolSize; i++) {\n\t\t\tconst position = { x: -200, y: -200 };\n\t\t\tconst rectangle = Body.create({ position, isSleeping: true });\n\t\t\tComposite.add(world, rectangle);\n\t\t\trectanglePool.push(rectangle);\n\t\t}\n\n\t\t// Function to activate a rectangle from the pool\n\t\tconst activateRectangle = () => {\n\t\t\tconst inactiveRectangle = rectanglePool.find((rect) => !rect.isActive);\n\n\t\t\tif (inactiveRectangle) {\n\t\t\t\tconst randomX = Common.random(0, windowWidth);\n\t\t\t\tconst randomY = Common.random(-1000, -500);\n\n\t\t\t\tBody.setPosition(inactiveRectangle, { x: randomX, y: randomY });\n\t\t\t\tresetFallingRectangle(inactiveRectangle);\n\n\t\t\t\tinactiveRectangle.isActive = true;\n\t\t\t\tinactiveRectangle.isSleeping = false;\n\n\t\t\t\t// Set a timeout for the next activation after 0.5 seconds\n\t\t\t\tsetTimeout(activateRectangle, 500);\n\t\t\t}\n\t\t};\n\n\t\t// Initial creation of falling rectangles\n\t\tfor (let i = 0; i < 10; i++) {\n\t\t\tsetTimeout(activateRectangle, i * 500); // Introduce delay for the initial rectangles\n\t\t}\n\n\t\t// Function to reset a falling rectangle\n\t\tconst resetFallingRectangle = (rectangle) => {\n\t\t\tBody.setPosition(rectangle, { x: Common.random(windowWidth), y: 0 });\n\t\t\tBody.setVelocity(rectangle, { x: 0, y: 0 });\n\t\t};\n\n\t\tComposite.add(world, [\n\t\t\tstack,\n\t\t\t// Centered rectangles\n\n\t\t\tBodies.rectangle(windowWidth / 2, windowHeight, windowWidth, 50, {\n\t\t\t\tisStatic: true,\n\t\t\t}),\n\t\t\tBodies.rectangle(windowWidth, windowHeight / 2, 50, windowHeight, {\n\t\t\t\tisStatic: true,\n\t\t\t}),\n\t\t\tBodies.rectangle(0, windowHeight / 2, 50, windowHeight, {\n\t\t\t\tisStatic: true,\n\t\t\t}),\n\t\t]);\n\n\t\t// add mouse control\n\t\tconst mouse = Mouse.create(render.canvas);\n\t\tconst mouseConstraint = MouseConstraint.create(engine, {\n\t\t\tmouse,\n\t\t\tconstraint: {\n\t\t\t\tstiffness: 0.2,\n\t\t\t\trender: {\n\t\t\t\t\tvisible: true,\n\t\t\t\t},\n\t\t\t},\n\t\t});\n\n\t\tComposite.add(world, mouseConstraint);\n\n\t\t// keep the mouse in sync with rendering\n\t\trender.mouse = mouse;\n\n\t\t// fit the render viewport to the scene\n\t\tRender.lookAt(render, {\n\t\t\tmin: { x: 0, y: 0 },\n\t\t\tmax: { x: window.innerWidth, y: window.innerHeight },\n\t\t});\n\n\t\t// add gyro control\n\t\tconst updateGravity = (event) => {\n\t\t\tconst orientation =\n\t\t\t\ttypeof window.orientation !== 'undefined' ? window.orientation : 0;\n\t\t\tconst gravity = engine.gravity;\n\n\t\t\tif (orientation === 0) {\n\t\t\t\tgravity.x = Common.clamp(event.gamma, -90, 90) / 90;\n\t\t\t\tgravity.y = Common.clamp(event.beta, -90, 90) / 90;\n\t\t\t} else if (orientation === 180) {\n\t\t\t\tgravity.x = Common.clamp(event.gamma, -90, 90) / 90;\n\t\t\t\tgravity.y = Common.clamp(-event.beta, -90, 90) / 90;\n\t\t\t} else if (orientation === 90) {\n\t\t\t\tgravity.x = Common.clamp(event.beta, -90, 90) / 90;\n\t\t\t\tgravity.y = Common.clamp(-event.gamma, -90, 90) / 90;\n\t\t\t} else if (orientation === -90) {\n\t\t\t\tgravity.x = Common.clamp(-event.beta, -90, 90) / 90;\n\t\t\t\tgravity.y = Common.clamp(event.gamma, -90, 90) / 90;\n\t\t\t}\n\t\t};\n\n\t\twindow.addEventListener('deviceorientation', updateGravity);\n\n\t\t// cleanup on unmount\n\t\treturn () => {\n\t\t\tMatter.Render.stop(render);\n\t\t\tMatter.Runner.stop(runner);\n\t\t\tif (typeof window !== 'undefined') {\n\t\t\t\twindow.removeEventListener('deviceorientation', updateGravity);\n\t\t\t}\n\t\t};\n\t}, []); // Run once on mount\n\n\treturn (\n\t\t<>\n\t\t\t<GyroContainer ref={gyroscopeRef} />\n\t\t</>\n\t);\n};\n\nexport default Gyro;\n","// App.js\nimport React from 'react';\nimport * as S from './App.style';\nimport snowflakeStore from './Snowflake';\nimport Gyro from './Gyro';\n\nconst App = () => {\n\t// const [gravity, setGravity] = useState(0);\n\t// const [windPower, setWindPower] = useState(0);\n\n\t// const [, setRender] = useState(true);\n\n\t// useEffect(() => {\n\t// \twindow.addEventListener('resize', () => {});\n\n\t// \tconst updateSnowflakes = () => {\n\t// \t\tsnowflakeStore.updateSnowflakes();\n\t// \t\t// handleSnowflakeInteractions();\n\t// \t\tsetRender((prev) => !prev);\n\t// \t\tsetTimeout(updateSnowflakes, 1000 / 60);\n\t// \t};\n\n\t// \tupdateSnowflakes();\n\t// }, []);\n\n\treturn (\n\t\t<S.Container>\n\t\t\t<Gyro />\n\t\t\t<S.WindButton onClick={() => {}}>바람 세기</S.WindButton>\n\t\t\t<S.GravityButton onClick={() => {}}>중력 세기</S.GravityButton>\n\t\t</S.Container>\n\t);\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n"],"sourceRoot":""}